export interface User {
  _id: string,
  firstName: string,
  lastName: string,
  email: string,
  phoneNumber: string,
  role: string,
  isBlocked: boolean,
  password?: string,
  createAt: Date,
  updateAt: Date,
  token: string
}
export interface Host {
  _id: string,
  firstName: string,
  lastName: string,
  email: string,
  phoneNumber: string,
  role: string,
  isBlocked: boolean,
  password?: string,
  kyc_idProof: string,
  kyc_addressProof: string,
  kyc_panCard: string,
  kyc_verified: string,
  accountHolderName: string,
  accountNumber: string,
  ifsc: string,
  branch: string,
  registrationCertificate: string,
  safetyCertificate: string,
  license: string,
  insurance: string,
  isVerified: string,
  createdAt: Date,
  updatedAt: Date,
}

export interface Category {
  _id: string,
  categoryName: string,
  description: string,
  isActive: string,
  createdAt: string,
  updatedAt: string,
}

export interface Activity {
  _id: string;
  activityName: string;
  itenary: string;
  maxCapacity: number;
  categoryId: string;
  pricePerHead: number;
  userId: string;
  street: string;
  city: string;
  district: string;
  state: string;
  postalCode: string;
  country: string;
  recurrenceDays: [string];
  location: {
    type?: string;
    coordinates: [number, number];
  };
  images: (string | File)[];
  reportingPlace: string;
  reportingTime: string;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface BlogPost {
  _id: string;            // MongoDB ObjectId as a string
  userId: string;         // Author's user ID
  title: string;          // Blog title
  author: string;         // Author name (redundant but useful for fast access)
  introduction: string;   // Short intro or preview text
  sections: BlogSection[]; // Multiple sections in the blog
  image: string ;          // Main or introduction image
  views: number;          // Number of views
  likes: string[];        // Array of userIds who liked it
  createdAt: Date;        // Auto-generated by MongoDB or backend
  updatedAt: Date;        // Auto-updated on edits
}

export interface BlogSection {
  sectionTitle: string;        // Title of the section
  content: string;        // Body content (Markdown or HTML)
  image?: string ;         // Optional image for the section
}


export interface Booking {
  _id: string;
  userId: string;
  activityId: string;
  activityTitle: string;
  date: Date;
  participantCount: number;
  pricePerParticipant: number;
  paymentStatus: "pending" | "paid" | "failed" | "refunded";
  razorpayPaymentId?: string;
  razporpayOrderId?: string;
  razorpaySignatue?: string;
  bookingStatus: "pending" | "cancelled" | "completed";
  hostId: string;
  isCancelled: boolean;
  cancellationReason?: string;
  isRefunded: boolean;
  refundId?: string;
  refundAmount?: number;
  refundStatus?: "initialized" | "completed" | "failed";
  razorpayTransferId?: string;
  isReleasedId: boolean;
  holdUntilDate: Date;
  updatedAt: Date;
  createdAt: Date;
}

export interface AuthResponse {
  user?: User | Host | null | undefined,
  category?: Category 
  categories?: Category[]
  activities?: Activity[] ,
  blogs?: BlogPost[],
  blog?: BlogPost,
  activity?: Activity
  totalPages?: number,
  razorpayAccountId?: string,
  availability?: {date: string, availableSeats: number}[]
  booking?: Booking,
  token?: string | null | undefined;
  message?: string;
}
export interface ResponseType<T> {
  data: T;
  status: number;
  statusText?: string;
  headers?: Record<string,string>;
  config?: {
    url?: string;
    method?: string;
  };
  request?: unknown;
}

export type ChildrenProps = {
    children: React.ReactNode
}

